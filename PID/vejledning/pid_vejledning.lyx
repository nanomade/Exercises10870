#LyX 2.4 created this file. For more info see https://www.lyx.org/
\lyxformat 620
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children no
\language danish
\language_package default
\inputencoding auto-legacy
\fontencoding auto
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_roman_osf false
\font_sans_osf false
\font_typewriter_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement class
\float_alignment class
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_formatted_ref 0
\use_minted 0
\use_lineno 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip halfline
\is_math_indent 0
\math_numbering_side default
\quotes_style danish
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tablestyle default
\tracking_changes false
\output_changes false
\change_bars false
\postpone_fragile_content true
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\docbook_table_output 0
\docbook_mathml_prefix 1
\end_header

\begin_body

\begin_layout Title
PID Temperaturkontrol
\end_layout

\begin_layout Section
Introduktion
\end_layout

\begin_layout Standard
Form√•let med denne √∏velse er at opn√• kendskab til et meget anvendt kontrol\SpecialChar softhyphen
system til at holde en given variabel konstant i et system,
 hvor variablen er p√•virket af omskiftelige omgivelser,
 nemlig PID-regulering.
 Denne form for regulering blev oprindelig opfundet i forbindelse med regulering af mekaniske systemer s√•som dampmaskiner og skibe,
 men kan benyttes til regulering inden for en n√¶sten uendelig m√¶ngde omr√•der.
 Vi √∏nsker i denne √∏velse at regulere temperaturen i et mindre system,
 som best√•r af en ganske almindelig elektrisk p√¶re,
 der er omsluttet af en kop.
 I dette system kan vi variere sp√¶ndingsfaldet over p√¶ren og derved styre dens opvarmning.
 Temperaturen af p√¶ren m√•les med et termoelement,
 der udnytter Seebeck-effekten til at generere en sp√¶ndings\SpecialChar softhyphen
forskel over termoelementet,
 der er proportional med temperaturgradienten i elementet.
\end_layout

\begin_layout Subsection
Opgave
\end_layout

\begin_layout Standard
Hvis f√∏lsomheden af termoelementet er 41 
\begin_inset Formula $\mu$
\end_inset

V/K med en forst√¶rkning p√• 100 og datakortet har en 16 bit opl√∏sning p√• sin 0 ‚àí 10 V indgang,
 hvad er s√• den mindste √¶ndring i temperaturen vi kan forvente at m√•le?
\end_layout

\begin_layout Subsection
Udstyr og dataopsamling
\end_layout

\begin_layout Standard
PC,
 dataopsamlingskort NI-6251,
 NI SC-2345,
 programmerbar str√∏mforsyning (ISO-TECH IPS-2010),
 RS-232 forbindelse til PC‚Äôen),
 gl√∏dep√¶re (150 W),
 termo\SpecialChar softhyphen
par (type K),
 kop samt kabeler.
\end_layout

\begin_layout Standard
Reguleringen implementeres i Python - dette er dog en √∏velse i PID-regulering,
 ikke i Python,
 og I f√•r derfor udleveret skelettet til programmet,
 inklusiv et eksempel p√• en simpel regulering.
 Jeres opgave er udvide dette program til en fuld PID-regulering samt at eksperimentere med regulerings\SpecialChar softhyphen
parametre for at unders√∏ge deres betydning for dens ydelse.
 Programmet vil v√¶re tilg√¶ngeligt p√• computerne,
 og kan ogs√• findes p√• Github:
 
\end_layout

\begin_layout Verbatim*
https://github.com/nanomade/Exercises10870/tree/main/PID
\end_layout

\begin_layout Section
T√¶nd/sluk regulering
\end_layout

\begin_layout Standard
Lad os starte med at betragte en simpel t√¶nd/sluk-regulering,
 hvor den reguler\SpecialChar softhyphen
bare ydelse 
\begin_inset Formula $P$
\end_inset

 enten kan t√¶ndes ved maksimal ydelse 
\begin_inset Formula $P=P_{ùëöùëéùë•}$
\end_inset

 eller slukkes 
\begin_inset Formula $P=0$
\end_inset

.
 Reguleringen af ydelsen bruges s√• til at regulere en given variabel 
\begin_inset Formula $T$
\end_inset

 i forhold til et forudbestemt s√¶tpunkt 
\begin_inset Formula $T_{s}$
\end_inset

.
 Et klassisk eksempel p√• en t√¶nd/sluk regulering er en ovn.
 De fleste ovne er udstyret med et varmeelement som kan v√¶re enten t√¶ndt eller slukket,
 men ikke har nogen mellemindstillinger.
 T√¶nder vi nu ovnen med et s√¶tpunkt p√• eksempelvis 
\begin_inset Formula $200^{\circ}\text{C}$
\end_inset

 vil varmelegmet t√¶nde fordi ovnen (formentlig) er under 
\begin_inset Formula $200^{\circ}\text{C}$
\end_inset

.
 Temperaturen vil nu gradvist stige indtil den er over setpunktet hvorefter varmelegmet slukker.
 N√•r ovnen igen er under setpunktet,
 t√¶nder varmelegmet igen - denne process vil forts√¶tte s√• l√¶nge setpunktet fastholdes og den faktiske temperatur vil svinge omkring 
\begin_inset Formula $200^{\circ}\text{C}$
\end_inset

 med en amplitude og periode som afh√¶nger af en lang r√¶kke parametere,
 eksempelvis effekten af varmelegmet,
 tidskonstanten af systemet,
 hvor velisoleret ovnen er,
 og om der sker faseovergange i den opvarmede mad.
\end_layout

\begin_layout Subsection
Opgave
\end_layout

\begin_layout Standard
Find andre eksempler p√• t√¶nd/sluk regulering fra jeres hverdag.
 
\end_layout

\begin_layout Subsection
Opgave
\end_layout

\begin_layout Standard
Hvorfor er en lyskontakt ikke et eksempel p√• denne type af t√¶nd/sluk regulering?
\end_layout

\begin_layout Subsection
√òvelse
\end_layout

\begin_layout Standard
I har f√•et udleveret et Python program som implementerer en t√¶nd-sluk regulering.
 Pr√∏v programmet og se hvordan det opf√∏rer sig.
 Pr√∏v at eksperimentere med forskellige v√¶rdier af 
\begin_inset Formula $max\_voltage$
\end_inset

 og se hvilken indflydelse det har p√• reguleringen.
 Undg√• at lade temperaturen kommer over cirka 
\begin_inset Formula $350^{\circ}\text{C}$
\end_inset

 da forbindelsesledningerne til p√¶ren begynder at f√• det varmere end de bryder sig om.
 
\begin_inset Float figure
placement document
alignment document
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename bang_bang_regulator.png
	display false
	width 12cm

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:temp_bang_bang"

\end_inset

Eksempel p√• on/off regulering
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
PID-regulering
\end_layout

\begin_layout Standard
Vi s√• i forrige afsnit,
 at t√¶nd/sluk-regulering vil resultere i en svingende variabel,
 som funktion af tiden.
 Dette er m√•ske tilfredsstillende i visse tilf√¶lde,
 men i andre situationer vil disse udsving v√¶re alt for store ‚Äì og i √∏vrigt vil de pludselige √¶ndringer mellem fuld effekt og nul effekt over tid give un√∏dig slitage i hardwaren - forestiller man sig eksempelvis at reguleringen er af kursen p√• et skib,
 vil en regulering som udelukkende tillader fuldt ror-udslag √•benlyst ikke fungere i l√¶ngden.
 I disse tilf√¶lde kan vi benytte en PID-regulering,
 der er en algoritme som tillader trinl√∏s regulering af den styrende parameter.
 Den best√•r af tre funktioner med meget forskellig virkem√•de:
 Proportional-,
 Integral,
 og Differential-regulering.
 Vi vil i det f√∏lgende gennemg√• disse virkem√•der i detaljer,
 s√• I kan f√• en fornemmelse for deres betydning i reguleringen.
\end_layout

\begin_layout Subsection
Proportional-regulering
\end_layout

\begin_layout Standard
Lad os tage udgangspunkt i et tog som i henhold til k√∏replanen √∏nsker at tilbagel√¶gge en afstand med en p√• forh√•nd fastlagt fart.
 Toget hastighed kan selvsagt ikke forudsiges alene ud fra motoreffekten - ydre omst√¶ndigheder s√• som last,
 vind og h√¶ldning af terr√¶net vil betyde at en given effekt ikke giver en entydig hastighed.
 For at holde k√∏replanen kan toget s√• v√¶lge at k√∏re noget af str√¶kningen med fuld motoreffekt og andre dele med motoren slukket - denne metode vil godt kunne bringe toget frem til rette tid,
 men de pludselige accelerationer vil n√¶ppe v√¶re behagelige for passagererne
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset

 (og katastrofal for salgtet af kaffe p√• turen).
 En langt bedre l√∏sning vil v√¶re at regulere motoreffekten trinl√∏st s√• toget opn√•r den √∏nskede hastighed.
 I f√∏rste approksimation fors√∏ger vi os med en model hvor motoreffekten,
 
\begin_inset Formula $P$
\end_inset

,
 reguleres efter hvor langt farten er fra den √∏nskede v√¶rdi.
 Rent matematisk kan vi skrive 
\begin_inset Formula 
\begin{equation}
P(t)=K_{P}\cdot E(t)\label{eq:proportional_equation}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Her er 
\begin_inset Formula $E(t)=v_{s}-v(t)$
\end_inset

 forskellen mellem s√¶tpunktet og den aktuelle v√¶rdi,
 og 
\begin_inset Formula $K_{P}$
\end_inset

 er en omregningsfaktor hvis enhed afh√¶nger af dimensionerne for henholdsvis variabel og ydelse.
\begin_inset Float figure
placement document
alignment document
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename p_regulator.png
	display false
	width 12cm

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:temp_P_regulering"

\end_inset

Eksempel p√• P-regulering
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
√òvelse
\begin_inset CommandInset label
LatexCommand label
name "subsec:√òvelse_p_regulering"

\end_inset


\end_layout

\begin_layout Standard
I har ikke et tog til r√•dighed,
 men brug i stedet p√¶re-i-kop opstillingen til at afpr√∏ve en propertional regulering ved at udvide Python-programmet med en P-regulering.
 Teknisk g√∏res dette lettest ved at lave en ny klasse efter samme princip som 
\begin_inset Formula $BangBangRegulator$
\end_inset

 hvor I nedarver 
\begin_inset Formula $Regulator$
\end_inset

 og implementerer den n√∏dvendige funktionalitet i form af ligning
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:proportional_equation"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

.
\end_layout

\begin_layout Standard
Et tip er at v√¶lge et forholdsvist h√∏jt s√¶tpunkt for temperaturen,
 fx 
\begin_inset Formula $200^{\circ}\text{C}$
\end_inset

 - p√• den m√•de k√∏ler p√¶ren nogenlunde hurtigt,
 og det bliver lettere at lave eksperimenter uden at vente urimeligt l√¶nge p√• at p√¶ren k√∏ler mellem de enkelte fors√∏g.
 
\end_layout

\begin_layout Itemize
Find forst√¶rkningen 
\begin_inset Formula $K_{P}$
\end_inset

,
 s√• temperaturen kommer t√¶ttest p√• s√¶tpunktet uden at den begynder at svinge for meget omkring dette.
\end_layout

\begin_layout Itemize
Beskriv,
 hvordan P-reguleringen virker for forskellige v√¶rdier af 
\begin_inset Formula $K_{P}$
\end_inset

,
 pr√∏v med lave v√¶rdier og h√∏je v√¶rdier (fx 
\begin_inset Formula $\frac{1}{2}$
\end_inset

 og 
\begin_inset Formula $2$
\end_inset

).
 For hvilke v√¶rdier af 
\begin_inset Formula $K_{P}$
\end_inset

 ligner P-reguleringen en t√¶nd/sluk-regulering?
\end_layout

\begin_layout Subsection
Integral-regulering
\end_layout

\begin_layout Standard
Du s√• formentlig i √∏velse
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:√òvelse_p_regulering"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

,
 at P-reguleringen ikke rammer i setpunktet,
 men opn√•r ligev√¶gt ved en tempetur under dette.
 Dette skyldes naturligvis,
 at med en ren P-regulering bliver effekten nul n√•r det √∏nskede setpunkt er opn√•et.
 Til at afhj√¶lpe denne situation √∏nsker vi en funktion,
 der √∏ger effekten gradvist,
 s√• l√¶nge farten er under s√¶tpunktet.
 Denne funktion kan repr√¶senteres ved hj√¶lp af integralet over fejlen,
 da dette vil stige,
 hvis fejlen ikke mindskes numerisk.
 Tilf√∏jes dette til ligning (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:proportional_equation"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

) f√•r vi 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
P(t)=K_{P}E(t)+K_{I}\int_{0}^{t}E(t')dt'\label{eq:prop_integral}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Her er 
\begin_inset Formula $K_{I}$
\end_inset

 en pr√¶faktor til integralv√¶rdien,
 som i lighed med propertionalleddet 
\begin_inset Formula $K_{P}$
\end_inset

 kan justeres efter √∏nske.
 Integral-reguleringen er det vigtigste led for at holde variablen ved s√¶tpunktet for alle systemer som kr√¶ver en effekt for at holde et setpunkt (da P-leddet jo her er nul).
 
\begin_inset Float figure
placement document
alignment document
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pi_regulator.png
	display false
	width 12cm

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:temp_PI_regulering"

\end_inset

Eksempel p√• PI-regulering
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
√òvelse
\end_layout

\begin_layout Standard
Udvid Python programmet med en PI-regulering.
 Plot og komment√©r p√• I-reguleringens virkem√•de samt komment√©r p√• forbedringerne i forhold til P-reguleringen.
\end_layout

\begin_layout Subsection
Differential-regulering
\end_layout

\begin_layout Standard
I klassisk PID-regulering findes udover P- og I-leddet ogs√• et differentialled som har til hensigt at d√¶mpe reguleringens respons p√• store √¶ndringer.
 Vi tilf√∏jer dette til ligning
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:prop_integral"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 og f√•r:
\begin_inset Formula 
\begin{equation}
P(t)=K_{P}E(t)+K_{I}\int_{0}^{t}E(t')dt'+K_{D}\frac{d}{dt}E(t)\label{eq:prop_integral_diff}
\end{equation}

\end_inset


\end_layout

\begin_layout Subsubsection
√òvelse
\end_layout

\begin_layout Standard
Udvid programmet med en PID-regulering.
 Plot og komment√©r p√• reguleringens virkem√•de.
 Ser I en forbedring i forhold til PI-reguleringen?
\end_layout

\begin_layout Section
But wait;
 there's more
\end_layout

\begin_layout Standard
Hvis I har tid efter at have implementeret og afpr√∏vet de tre dele af PID-reguleringen er her et par ekstra opgaver I kan kaste jer over.
\end_layout

\begin_layout Subsection
Overshoot
\end_layout

\begin_layout Standard
Du har sikkert set,
 at temperaturen skyder godt over s√¶tpunktet ved start.
 Dette er helt normalt og skyldes ‚Äùhukommelsen‚Äù i integral-reguleringen ‚Äì v√¶rdien af integralet stiger s√• l√¶nge temperaturen er under s√¶tpunktet og begynder f√∏rst at falde,
 n√•r temperaturen kommer over s√¶tpunktet.
 Det er typisk ikke muligt at undg√• dette ved alene at stille p√• parametrene (
\begin_inset Formula $K_{P}$
\end_inset

,
 
\begin_inset Formula $K_{I}$
\end_inset

 og 
\begin_inset Formula $K_{D}$
\end_inset

),
 med mindre man accepterer at den normale drift forringes.
 I mange situationer kan problemet dog reduceres dramatisk ved simpelthen at indf√∏re i program-logikken at integralleddet kun opdateres n√•r man er passende t√¶t p√• setpunktet - eksempelvis n√•r bidraget fra p-ledet er mindre end det maksimale udslag
\end_layout

\begin_layout Subsubsection
√òvelse
\end_layout

\begin_layout Standard
Pr√∏v at implementere en forbedret algoritme som mindsker overshoot-problemet,
 eksempelvis via metoden n√¶vnt ovenfor.
\end_layout

\begin_layout Subsection
Variabelt setpunkt
\end_layout

\begin_layout Standard
Meget ofte er det √∏nskede setpunkt ikke en konstant v√¶rdi,
 men en mere kompli\SpecialChar softhyphen
ceret funktion.
 I eksemplet med toget,
 vil der eksempelvis kunne v√¶re omr√•der p√• str√¶kningen hvor den √∏nskede hastighed var lavere end andre fordi man passerer en station uden at stoppe.
 For temperaturreguleringer kunne der v√¶re tale om en process hvor man √∏nsker at udst√¶tte sin pr√∏ve for forskellige temperaturer i forskellige tidsintervaller - helt generelt kan man v√¶lge at se setpunktet som en funktion af tid fremfor en konstant v√¶rdi.
\end_layout

\begin_layout Subsubsection
√òvelse
\end_layout

\begin_layout Standard
Implementer et variabelt setpunkt - hvordan det skal variere er op til jer selv - og afpr√∏v om jeres PID kan f√∏lge den √∏nskede tidsafh√¶ngighed.
\end_layout

\end_body
\end_document
